{"version":3,"sources":["persones/persones.js","App.js","userinput/userinput.js","useroutput/useroutput.js","CalculatorApp/Calculator.js","CalculatorApp/calcresult.js","serviceWorker.js","index.js"],"names":["persones","props","custstyle","color","onClick","click","style","id","name","age","type","fontSize","margin","padding","fontWeight","backgroundColor","onChange","change","value","App","state","username","text","isuser","calcNo","iscalc","persone","userstateHandler","event","setState","target","ToggleuserHandler","douser","notcalc","DeletepersoneHandler","PersoneIndex","splice","changenameHandler","personeIndex","findIndex","p","person","persons","btnstyle","border","width","letterSpacing","marginTop","this","keypress","e","keyCode","console","log","eval","user","showcalc","userName","map","Index","key","ev","opvalue","className","React","Component","Input","placeholder","Output","calculator","height","onKeyUp","result","disabled","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.be588504.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst persones = (props) => {\r\n    let custstyle = {\r\n        color: 'yellow'\r\n    }\r\n    const style = {\r\n        fontSize: '18px',\r\n        margin: '8px',\r\n        padding: '5px',\r\n        fontWeight: 'bolder',\r\n        backgroundColor: 'skyblue'\r\n    }\r\n    return (\r\n        <div>\r\n            <h3 onClick={props.click}>\r\n                <span style={custstyle}>Id : {props.id}</span>  I am : <span style={custstyle}>{props.name}</span> and my age is : <span style={custstyle}>{props.age}</span>\r\n\r\n            </h3>\r\n            <input type='text' style={style} onChange={props.change} value={props.name} />\r\n        </div>\r\n    )\r\n}\r\nexport default persones;","import React, { useState } from 'react';\nimport './App.css';\nimport Input from './userinput/userinput';\nimport Output from './useroutput/useroutput';\nimport Persones from './persones/persones';\nimport persones from './persones/persones';\nimport Calculator from './CalculatorApp/Calculator';\nimport Calcresult from './CalculatorApp/calcresult';\n\nclass App extends React.Component {\n  state = {\n    username: '',\n    text: '',\n    isuser: false,\n    calcNo: '',\n    iscalc: false,\n    persone: [\n      { id: '01', name: 'Rahul', age: 24 },\n      { id: '02', name: 'Rajshree', age: 26 },\n      { id: '03', name: 'Sushil', age: 28 }\n\n    ]\n  }\n\n  userstateHandler = (event) => {\n    this.setState({\n      username: event.target.value,\n    })\n  }\n\n\n  ToggleuserHandler = () => {\n    let douser = this.state.isuser;\n    let notcalc = this.state.iscalc;\n    this.setState({\n      isuser: !douser,\n      iscalc: !notcalc,\n    })\n  }\n\n  DeletepersoneHandler = (PersoneIndex) => {\n    // const persones = this.state.persone;\n    const persones = [...this.state.persone]\n    persones.splice(PersoneIndex, 1);\n    this.setState({ persone: persones })\n  }\n\n\n  changenameHandler = (event, id) => {\n    const personeIndex = this.state.persone.findIndex(p => {\n      return p.id === id\n    })\n    const person = {\n      ...this.state.persone[personeIndex]\n    };\n    person.name = event.target.value;\n\n    const persons = [...this.state.persone];\n\n    persons[personeIndex] = person;\n    this.setState({\n      persone: persons\n    })\n  }\n\n\n\n  render() {\n\n    // functions...\n\n    const btnstyle = {\n      backgroundColor: 'orange',\n      border: '1px solid red',\n      padding: '5px',\n      width: '150px',\n      fontSize: '20px',\n      fontWeight: '900',\n      letterSpacing: '2.5px',\n      marginTop: '10px'\n    }\n\n    this.keypress = (e) => {\n      if (e.keyCode == 13) {\n        console.log('value', e.target.value);\n        this.setState({\n          calcNo: eval(this.state.calcNo),\n        })\n\n      }\n    }\n\n\n    let user = null;\n    let showcalc = null;\n    if (this.state.isuser) {\n      this.user = (\n        <div>\n          <Input change={this.userstateHandler} name={this.state.username} />\n          <Output userName={this.state.username} />\n          {this.state.persone.map((person, Index) => {\n            return <Persones click={() => this.DeletepersoneHandler(Index)}\n              key={person.id} id={person.id}\n              change={(event) => this.changenameHandler(event, person.id)}\n              name={person.name}\n              age={person.age} />\n          })}\n\n\n\n        </div>)\n\n    } else {\n      this.user = null;\n      showcalc = (\n        <div>\n          <Calculator click={ev => this.setState({ calcNo: ev.target.value })} keypress={this.keypress} />\n          <Calcresult opvalue={this.state.calcNo} />\n        </div>\n      );\n\n    }\n\n    // Return statement...\n\n    return (\n      <div className=\"App\" >\n        <header className=\"App-header\">\n          {this.user}\n          <button onClick={this.ToggleuserHandler} style={btnstyle}>Toggle</button>\n\n          {showcalc}\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\r\nconst Input = (props) => {\r\n    const style = {\r\n        fontSize: '24px',\r\n        margin: '8px',\r\n        padding: '8px',\r\n        backgroundColor: 'yellow',\r\n        border: '3px solid green'\r\n    }\r\n    return (<div>\r\n        <input type='text' style={style} onChange={props.change} value={props.name} placeholder='Enter some text' />\r\n    </div>);\r\n}\r\nexport default Input;","import React from 'react';\r\n\r\nconst Output = (props) => {\r\n    const style = {\r\n        fontSize: '30px',\r\n        marginTop: '20px',\r\n\r\n    }\r\n    return (<div >\r\n        <p style={style}>UserName:  {props.userName}</p>\r\n\r\n    </div>);\r\n}\r\nexport default Output;","import React from 'react';\r\n\r\n\r\nconst calculator = (props) => {\r\n    const style = {\r\n        marginTop: '50px',\r\n        width: '200px',\r\n        height: '30px',\r\n\r\n    }\r\n    return (\r\n        <div>\r\n            <input style={style} type='text' onChange={props.click} onKeyUp={props.keypress} placeholder='Calculate Numbers Here' />\r\n        </div>\r\n    )\r\n}\r\nexport default calculator;","import React from 'react';\r\n\r\nconst result = (props) => {\r\n    return (\r\n        <div>\r\n            <input type='text' value={props.opvalue} placeholder='Answer' disabled />\r\n        </div>\r\n    )\r\n}\r\nexport default result;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}